#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

class TalentAssessmentSystem {
public:
    static double FindMedianTalentIndex(const vector<int>& fireAbility, const vector<int>& iceAbility) {
        int n = fireAbility.size();
        int m = iceAbility.size();
        int totalSize = n + m;

        // 如果 fireAbility 是更长的数组，则交换它们
        if (n > m) {
            return FindMedianTalentIndex(iceAbility, fireAbility);
        }

        int leftSize = (totalSize + 1) / 2; // 左侧部分的大小
        int low = 0, high = n;

        while (low <= high) {
            int partitionFire = (low + high) / 2;
            int partitionIce = leftSize - partitionFire;

            int maxFire = (partitionFire == 0) ? INT_MIN : fireAbility[partitionFire - 1];
            int minFire = (partitionFire == n) ? INT_MAX : fireAbility[partitionFire];

            int maxIce = (partitionIce == 0) ? INT_MIN : iceAbility[partitionIce - 1];
            int minIce = (partitionIce == m) ? INT_MAX : iceAbility[partitionIce];

            // 检查是否找到中位数
            if (maxFire <= minIce && maxIce <= minFire) {
                if (totalSize % 2 == 0) {
                    return (max(maxFire, maxIce) + min(minFire, minIce)) / 2.0;
                } else {
                    return max(maxFire, maxIce);
                }
            } else if (maxFire > minIce) {
                high = partitionFire - 1; // 调整左边界
            } else {
                low = partitionFire + 1; // 调整右边界
            }
        }

        throw invalid_argument("Input arrays are not sorted.");
    }
};

// 单元测试
#include <cassert>

void TestFindMedianTalentIndex() {
    vector<int> fireAbility1 = {1, 3, 7, 9, 11};
    vector<int> iceAbility1 = {2, 4, 8, 10, 12, 14};
    assert(TalentAssessmentSystem::FindMedianTalentIndex(fireAbility1, iceAbility1) == 8.0);

    vector<int> fireAbility2 = {1, 2};
    vector<int> iceAbility2 = {3, 4, 5};
    assert(TalentAssessmentSystem::FindMedianTalentIndex(fireAbility2, iceAbility2) == 3.0); 
    vector<int> fireAbility3 = {}; 
    vector<int> iceAbility3 = {1}; 
    assert(TalentAssessmentSystem::FindMedianTalentIndex(fireAbility3, iceAbility3) == 1.0);
     } 
     int main() 
     { 
        TestFindMedianTalentIndex();
      cout << "所有测试通过！" << endl;
       return 0; 
       }