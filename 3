#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

class TreasureHuntSystem {
public:
    static int MaxTreasureValue(const vector<int>& treasures) {
        int n = treasures.size();
        if (n == 0) return 0;
        if (n == 1) return treasures[0];

        vector<int> dp(n, 0);
        dp[0] = treasures[0];
        dp[1] = max(treasures[0], treasures[1]);

        for (int i = 2; i < n; ++i) {
            dp[i] = max(dp[i - 1], dp[i - 2] + treasures[i]);
        }

        return dp[n - 1];
    }
};

// 单元测试
#include <cassert>

void TestMaxTreasureValue() {
    // 测试案例
    vector<int> treasures1 = {3, 1, 5, 2, 4};
    assert(TreasureHuntSystem::MaxTreasureValue(treasures1) == 12);

    vector<int> treasures2 = {1, 2, 3, 1};
    assert(TreasureHuntSystem::MaxTreasureValue(treasures2) == 4);

    vector<int> treasures3 = {2, 7, 9, 3, 1};
    assert(TreasureHuntSystem::MaxTreasureValue(treasures3) == 12);

    vector<int> treasures4 = {5, 3, 4, 11, 2};
    assert(TreasureHuntSystem::MaxTreasureValue(treasures4) == 16);
}

int main() {
    TestMaxTreasureValue();
    cout << "所有测试通过！" << endl;
    return 0;
}